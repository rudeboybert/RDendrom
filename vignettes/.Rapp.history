path.fie
path.file
path.file <- list.files(".", pattern = "here")
system(sprintf("find %s", path.file))
system(sprintf("which %s", path.file))
system(sprintf("find -f %s", path.file))
system(sprintf("find -Hf %s", path.file))
system(sprintf("echo `pwd`/`dirname $0`"))
?dir.name
?make.dir
?create.dir
?dir.create
path.expand(".")
normalizePath(".")
normalizePath(path.file)
path.file
write("here", file = "./here.txt")
write("here", file = "here.txt")
andy <- sum(350, 43, 30, 50, 30)
sean <- sum(400, 246, 28)
sean - andy
make.grow.vecs <- function(grow.par.samp, incr.vec = seq(0, 15, length = 100),#
  CI = c(0.05, 0.5, 0.95)) {#
  CI.grow <- vector("list", 2)#
  grow.mat <- apply(grow.par.samp, MAR = 1, pred.g, incr.vec = incr.vec)#
  incr.mat.1 <- matrix(c(lapply(grow.mat, "[", c(1)), recursive = TRUE),#
    ncol = length(incr.vec), byrow = TRUE)#
  incr.mat.2 <- matrix(c(lapply(grow.mat, "[", c(2)), recursive = TRUE),#
    ncol = length(incr.vec), byrow = TRUE)#
  CI.grow[[1]] <- apply(incr.mat.1, MARGIN = 2, FUN =  quantile, probs = CI,#
    na.rm = TRUE)#
  CI.grow[[2]] <- apply(incr.mat.2, MARGIN = 2, FUN =  quantile, probs = CI,#
    na.rm = TRUE)#
  return(CI.grow)#
}#
#
pred.g <- function(incr.vec, grow.pars) {#
  a1 <- grow.pars[1]#
  a2 <- grow.pars[2]#
  b1 <- grow.pars[3]#
  b2 <- grow.pars[4]#
  y1 <- dgamma(incr.vec, shape = a1, rate = b1)#
  y2 <- dgamma(incr.vec, shape = a2, rate = b2)#
  y1 <- ifelse(y1 == Inf, 0, y1)#
  y2 <- ifelse(y2 == Inf, 0, y2)#
  return(list(y1, y2))#
}#
#
run.mix.gamma <- function(x, y){#
   # Returns a spline function (made up of cubic polynomials) that interpolates the#
   # points given by the x and y vectors. The function has range [min(x), max(x)].#
   fn <- mix.gamma(x, gam.pars)#
   min_x <- min(x)#
   max_x <- max(x)#
   f <- function(x){#
      y <- fn(x)#
      y[x < min_x | max_x < x] <- NA#
      return(y)#
   }#
   return(f)#
}#
mix.gamma <- function(x, gam.pars) {#
  slow.prob <- dgamma(x, gam.pars[1], gam.pars[3])#
  fast.prob <- dgamma(x, gam.pars[2], gam.pars[4])#
  return(tot.prob <- slow.prob + fast.prob)#
}  #
#
cdf.mix <- function(fn, min_x, max_x, gam.pars) {#
  f <- function(x, gam.pars) {#
    y <- rep(NA, length(x))#
    total_area_under_curve <- integrate(fn, min_x, max_x)$value#
    apply_fn <- function(xval){integrate(fn, min_x, min(xval, max_x), gam.pars)$value}#
#
    y[min_x <= x & x <= max_x] <- sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) / total_area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
    return(y)#
  }#
  return(f)#
}#
#
inverse <- function(fn, min_x, max_x, gam.pars){#
   # Returns the inverse of a function for a given range.#
   # E.g. inverse(sin, 0, pi/2)(sin(pi/4)) equals pi/4 because 0 <= pi/4 <= pi/2#
   fn_inv <- function(y, gam.pars){#
      uniroot((function(x, gam.pars){fn(x, gam.pars) - y}), lower=min_x, upper=max_x)[1]$root#
   }#
   return(Vectorize(fn_inv))#
}#
#
# Set parameters to draw three graphs in the same plot window.
op <- par(mfrow=c(3, 1))#
cols <- brewer.pal(3, "Dark2")#
gam.pars <- c(1, 10, 0.5, 1)#
grow.vec <- seq(0.1, 20, length = 100)#
xlim <- c(0, 15)#
# Create and plot a spline function that interpolates between the points.#
fn <- run.mix.gamma(grow.vec, gam.pars)#
curve(fn, xlim[1], xlim[2], n=1000, main="Spline Interpolation Function")#
points(x, y)
library(RcolorBrewer)
library(RColorBrewer)
# Set parameters to draw three graphs in the same plot window.#
op <- par(mfrow=c(3, 1))#
cols <- brewer.pal(3, "Dark2")#
gam.pars <- c(1, 10, 0.5, 1)#
grow.vec <- seq(0.1, 20, length = 100)#
xlim <- c(0, 15)
fn <- run.mix.gamma(grow.vec, gam.pars)
fn
fn(3)
CStack_info()
run.mix.gamma(grow.vec, gam.pars)
curve(fn, grow.vec, n=1000, main="Spline Interpolation Function")
curve(fn, grow.vec, n=10, main="Spline Interpolation Function")
mix.gamma(grow.vec, gam.param)
mix.gamma(grow.vec, gam.params)
mix.gamma(grow.vec, gam.pars)
plot(mix.gamma(grow.vec, gam.pars))
area_under_curve <- integrate(mix.gamma, min_x = min(grow.vec), max(grow.vec))$value
area_under_curve <- integrate(mix.gamma, min_x = min(grow.vec), max_x = max(grow.vec))$value
area_under_curve <- integrate(mix.gamma, gam.pars, min_x = min(grow.vec), max_x = max(grow.vec))$value
gam.pars
mix.gamma <- function(x, gam.pars) {#
  slow.prob <- dgamma(x, gam.pars[1], gam.pars[3])#
  fast.prob <- dgamma(x, gam.pars[2], gam.pars[4])#
  return(tot.prob <- slow.prob + fast.prob)#
}
?integrate
area_under_curve <- integrate(mix.gamma, #
  min_x = min(grow.vec), #
  max_x = max(grow.vec), #
  gam.pars)$value
area_under_curve <- integrate(mix.gamma, #
  lower = min(grow.vec), #
  upper = max(grow.vec), #
  gam.pars)$value
area_under_curve
apply_fn <- function(xval){integrate(fn, min_x, min(xval, max_x), gam.pars)$value}
sapply(x[min_x <= x & x <= max_x], FUN = apply_fn)
min_x <- min(grow.vec)
max_x <- max(grow.vec)
apply_fn <- function(xval){integrate(fn, min_x, min(xval, max_x), gam.pars)$value}
apply_fn
sapply(grow.vec[min_x <= x & x <= max_x], FUN = apply_fn)
y[min_x <= x & x <= max_x] <- sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) / total_area_under_curve#
    y[min_x <= x & x <= max_x] <- sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) / total_area_under_curve
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn)
fn
integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value
xval <- grow.vec
apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}
apply_fn
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn)
y <- rep(NA, length(grow.vec))
y[min_x <= x & x <= max_x] <-
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) /
area_under_curve
y[min_x <= grow.vec & grow.vec <= max_x] <-
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) /
area_under_curve
y
y[x < min_x] <- 0#
    y[x > max_x] <- 1
plot(y)
run.mix.gamma <- function(x, gam.pars){#
   # Returns a spline function (made up of cubic polynomials) that interpolates the#
   # points given by the x and y vectors. The function has range [min(x), max(x)].#
   fn <- mix.gamma(x, gam.pars)#
   min_x <- min(x)#
   max_x <- max(x)#
   f <- function(x){#
      y <- fn(x)#
      y[x < min_x | max_x < x] <- NA#
      return(y)#
   }#
   return(f)#
}
mix.gamma <- function(x, gam.pars) {#
  slow.prob <- dgamma(x, gam.pars[1], gam.pars[3])#
  fast.prob <- dgamma(x, gam.pars[2], gam.pars[4])#
  return(tot.prob <- slow.prob + fast.prob)#
}
run.mix.gamma(grow.vec, gam.pars)
fn <- run.mix.gamma(grow.vec, gam.pars)
fn
fn(grow.vec)
fn(grow.vec, grow.vec)
cdf <- function(x, fn = mix.gamma) {#
  min_x <- min(x)#
  max_x <- max(x)#
  area_under_curve <- integrate(mix.gamma,#
    lower = min(x),#
    upper = max(x),#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
}
cdf
inverse(cdf)
cdf.inv <- inverse(cdf)
cdf.inv(grow.vec)
cdf.inv <- inverse(cdf, gam.pars)
cdf.inv
cdf.inv <- inverse(cdf)
cdf.inv(grow.vec)
cdf.inv(grow.vec, min_x = min(grow.vec), max_x = max(gorw.vec))
cdf <- function(x, fn = mix.gamma) {#
  min_x <- min(x)#
  max_x <- max(x)#
  area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
}
cdf.inv <- inverse(cdf)
cdf.inv(grow.vec, min_x = min(grow.vec), max_x = max(gorw.vec))
cdf.inv(grow.vec)
traceback()
cdf <- function(x, min_x, max_x) {#
  f <- function(x) {#
    area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
    }#
    return(f)#
}
plot(cdf(grow.vec, min(grow.vec), max(grow.vec)))
cdf(grow.vec)
plot(cdf(grow.vec))
fn <- cdf(grow.vec, min(grow.vec), max(grow.vec))
fn
fn(grow.vec)
inv(fn)
inverse(nf)
inverse(fn)
cdf.nf <- cdf(grow.vec, min(grow.vec), max(grow.vec))
cdf.inv <- inverse(cdf.fn)
cdf.inv(.4)
cdf.inv(.4, min_x = min(grow.vec))
cdf.nf
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))
cdf.inv(.4)
cdf.fn <- cdf(grow.vec, min(grow.vec), max(grow.vec))
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))
cdf.inv(.4)
cdf.inv(.4, gam.pars)
cdf.fn
cdf.inv
cdf.fn
cdf.inv
cdf.inv(.4, gam.pars)
cdf <- function(x, min_x, max_x) {#
  f <- function(x, gam.pars) {#
    area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
    }#
    return(f)#
}
cdf.fn <- cdf(grow.vec, min(grow.vec), max(grow.vec))#
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))#
cdf.inv(.4, gam.pars)
cdf.inv(.4, gam.pars = gam.pars)
cdf.inv <- inverse(cdf.fn, gam.pars, min_x = min(grow.vec), max_x = max(grow.vec))
cdf.inv(.4, gam.pars = gam.pars)
cdf <- function(x, min_x, max_x, gam.pars) {#
  f <- function(x, gam.pars) {#
    area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
    }#
    return(f)#
}#
cdf.fn <- cdf(grow.vec, min(grow.vec), max(grow.vec), gam.pars)#
cdf.inv <- inverse(cdf.fn, gam.pars, min_x = min(grow.vec), max_x = max(grow.vec))#
cdf.inv(.4, gam.pars = gam.pars)
?inverse
??inverse
GoFKernel
install.packages(GoFKernel)
install.packages('GoFKernel')
library(GoFKernel)
inverse
rm(inverse)
inverse
cdf.inv <- inverse(cdf.fn, min_x = min(grow.vec), max_x = max(grow.vec))
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec), gam.pars)
cdf.inv <- inverse(cdf.fn, lower = min(grow.vec), upper = max(grow.vec), gam.pars)
cdf.fn
mix.gamma
run.mix.gamma <- function(x, gam.pars){#
   # Returns a spline function (made up of cubic polynomials) that interpolates the#
   # points given by the x and y vectors. The function has range [min(x), max(x)].#
   fn <- mix.gamma(x, gam.pars)#
   min_x <- min(x)#
   max_x <- max(x)#
   f <- function(x){#
      y <- fn(x)#
      y[x < min_x | max_x < x] <- NA#
      return(y)#
   }#
   return(f)#
}
gam.fn <- run.mix.gamma(grow.vec, gam.pars)
gam.fn
gam.fn(grow.vec)
plot(gam.fn(grow.vec))
9 / 19
9 / 10
10 - 9
load('~/Dropbox/size.structure.dataset.outputs.RData')
objects()
lapply(objects(), summary)
lapply(objects(), str)
plot.chm
objects()
str(plot.meta)
summary(plot.meta)
str(plot.meta)
library(tidyverse)
?mdy
as.Date
?as.Date
library(forecast)#
library(fpp2)
?ts
?seasonplot
autoplot()
?outoplot
?autoplot
?substr
?split
2^6
?optim
100895.46 *0.28
28250.73 -7018.25
99602.66-3000
96602.66 * 0.0475
96602.66 * 0.0475+90
96602.66-4678.626
99602.66 * 0.025
99602.66 * 0.025 + 4678.63
99602.66 * 0.025 + 4678.63 - 6844.12
251 / 8
library(mvtnorm)
dmvnorm(x=c(0,0))#
dmvnorm(x=c(0,0), mean=c(1,1))#
x <- rmvnorm(n=100, mean=c(1,1))#
plot(x)
x
35 *12
rm(list = ls())#
#
### LIBRARIES ####
if (!require("pacman")) install.packages("pacman"); library(pacman)#
pacman::p_load(parallel, doParallel, foreach, Rcpp)#
#
### SOURCE THE data ####
# load interval and working.iter#
load("results/BCI/GLUEsetup_BCI.RData") # has model info and data on obs #
load(file.path("results/BCI/4.1GLUEsetup_part2_BCI.RData")) # has working.iter and growth and si matrix#
#
intervals <- info$intervals#
working.iter <- 1e+05 #growth_by_si.info$working.iter#
growth.data <- growth_by_si.info$growth.data#
load(file = paste("results/BCI/ds.bestfit_", working.iter, "_", growth.data, ".Rdata", sep = ""))# imports ds.bestfit
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
data(INPUT_dendro)
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$DATA_SET[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$DATA_SET[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$DATA_SET[1]))
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
data(INPUT_dendro)
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$DATA_SET[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$DATA_SET[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$DATA_SET[1]))
traceback()
devtools::install_github("seanmcm/RDendrom")
get.params
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
get.params
data(INPUT_dendro)
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$DATA_SET[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$DATA_SET[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$DATA_SET[1]))
getwd()
INPUT.dendro$DATA_SET[1]
INPUT.dendro$DATA_SET
INPUT.dendro
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$PROJECT[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$PROJECT[1]))
param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$PROJECT[1])#
Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$PROJECT[1])#
Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$PROJECT[1])#
OUTPUT.folder <- c(".")#
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))#
load(file = paste(OUTPUT.folder, Dendro.data.name, sep = "/")) # loads Dendro.complete#
load(file = paste(OUTPUT.folder, Dendro.split.name, sep = "/")) #loads Dendro.split#
load(file = paste(OUTPUT.folder, "Dendro_Tree.Rdata", sep = "/")) #loads Dendro.tree#
#
get.extra.metrics(#
  param.table,#
  Dendro.split,#
  OUTPUT.folder      = "OUTPUT",#
  param.table.name = sprintf("Param_table_complete_%s.csv", INPUT.dendro$PROJECT[1]),#
  Dendro.data.name = sprintf("Dendro_data_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Quantile.hull.name = "Quantile.hull.Rdata")
param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$PROJECT[1])#
Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$PROJECT[1])#
Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$PROJECT[1])#
OUTPUT.folder <- c(".")#
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))#
load(file = paste(OUTPUT.folder, Dendro.data.name, sep = "/")) # loads Dendro.complete#
load(file = paste(OUTPUT.folder, Dendro.split.name, sep = "/")) #loads Dendro.split#
load(file = paste(OUTPUT.folder, "Dendro_Tree.Rdata", sep = "/")) #loads Dendro.tree#
#
get.extra.metrics(#
  param.table,#
  Dendro.split,#
  OUTPUT.folder      = ".",#
  param.table.name = sprintf("Param_table_complete_%s.csv", INPUT.dendro$PROJECT[1]),#
  Dendro.data.name = sprintf("Dendro_data_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Quantile.hull.name = "Quantile.hull.Rdata")
param.table.name = sprintf("Param_table_complete_%s.csv", INPUT.dendro$PROJECT[1])#
OUTPUT.folder <- c(".")#
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))#
head(param.table)
nb.index
library(RDendrom)
data(INPUT_dendro)
head(INPUT.dendro)
no.neg.growth = TRUE
cutoff = 9
units = "cm"
par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd")
options(warn = -1)#
  TREE.ID.YR <- paste(as.character(INPUT.dendro$SITE), as.character(INPUT.dendro$TREE_ID),#
    as.character(INPUT.dendro$YEAR), sep = "_")#
  Dendro.split <- vector("list", length = length(unique(TREE.ID.YR)))#
  ind.dendro <- split(INPUT.dendro, f = INPUT.dendro$TREE_ID)#
#
  n.obs <- length(ind.dendro)#
#
  param.table <-c()#
  pb <- txtProgressBar(style = 3)#
  Dendro.tree <- vector("list", length(ind.dendro))#
  ct <- 1
i <- 1
ind.data <- ind.dendro[[i]] # loads an individual (multiple years)#
    ind.data$ORG_DBH <- rep(ind.data$ORG_DBH[1], nrow(ind.data))#
      ind.data$DBH_TRUE[1] <- ind.data$ORG_DBH[1]#
      for(v in 2:length(ind.data$DBH)){#
        ind.data$DBH_TRUE[v] <- gettruedbh(gw1 = 0.1 * ind.data$GAP_WIDTH[v - 1],#
          gw2 =  0.1 * ind.data$GAP_WIDTH[v], dbh1 = ind.data$DBH_TRUE[v - 1], units = units)#
      }#
      ind.data$DBH_TRUE[1] <- ifelse(units == "cm", ind.data$ORG_DBH, ind.data$ORG_DBH[1] / 10)#
    }
v
ind.data <- ind.dendro[[i]] # loads an individual (multiple years)#
    ind.data$ORG_DBH <- rep(ind.data$ORG_DBH[1], nrow(ind.data))#
    ind.data$DBH_TRUE[1] <- ind.data$ORG_DBH[1]#
    for(v in 2:length(ind.data$DBH)) {#
      ind.data$DBH_TRUE[v] <- gettruedbh(gw1 = 0.1 * ind.data$GAP_WIDTH[v - 1],#
        gw2 =  0.1 * ind.data$GAP_WIDTH[v], dbh1 = ind.data$DBH_TRUE[v - 1], units = units)#
    }#
    ind.data$DBH_TRUE[1] <- ifelse(units == "cm", ind.data$ORG_DBH, ind.data$ORG_DBH[1] / 10)
gettruedbh <- function(gw1, gw2, dbh1, units = "cm") {#
  gw1 <- ifelse(units == "cm", gw1, gw1 * 0.1)#
  gw2 <- ifelse(units == "cm", gw1, gw1 * 0.1)#
  rhs  <- dbh1 * (pi - asin(gw1 / dbh1))#
  #rhs is the length of the dendrometer band at time 1#
  dbh2 <- optimize(.difdendro, interval = c(0, dbh1 + 2 * gw2),#
    gw2 = gw2, rhs = rhs)#
  return(dbh2$minimum)#
}
gap2dbh <- function(gap.width, org.dbh, units = "cm") {#
  if(units == "cm") {#
    dbh.vec <- org.dbh + (((gap.width - gap.width[1]) / 10 / pi))#
  } else {#
    dbh.vec <- org.dbh + (((gap.width - gap.width[1]) / 1 / pi))#
  }#
  return(dbh.vec)#
}
ind.data <- ind.dendro[[i]] # loads an individual (multiple years)#
    ind.data$ORG_DBH <- rep(ind.data$ORG_DBH[1], nrow(ind.data))#
    ind.data$DBH_TRUE[1] <- ind.data$ORG_DBH[1]#
    for(v in 2:length(ind.data$DBH)) {#
      ind.data$DBH_TRUE[v] <- gettruedbh(gw1 = 0.1 * ind.data$GAP_WIDTH[v - 1],#
        gw2 =  0.1 * ind.data$GAP_WIDTH[v], dbh1 = ind.data$DBH_TRUE[v - 1], units = units)#
    }#
    ind.data$DBH_TRUE[1] <- ifelse(units == "cm", ind.data$ORG_DBH, ind.data$ORG_DBH[1] / 10)
.difdendro <- function(dbh2, gw2, rhs) {#
  lhs <- dbh2 * (pi - asin(gw2 / dbh2))#
  return(abs(lhs - rhs))#
}
ind.data <- ind.dendro[[i]] # loads an individual (multiple years)#
    ind.data$ORG_DBH <- rep(ind.data$ORG_DBH[1], nrow(ind.data))#
    ind.data$DBH_TRUE[1] <- ind.data$ORG_DBH[1]#
    for(v in 2:length(ind.data$DBH)) {#
      ind.data$DBH_TRUE[v] <- gettruedbh(gw1 = 0.1 * ind.data$GAP_WIDTH[v - 1],#
        gw2 =  0.1 * ind.data$GAP_WIDTH[v], dbh1 = ind.data$DBH_TRUE[v - 1], units = units)#
    }#
    ind.data$DBH_TRUE[1] <- ifelse(units == "cm", ind.data$ORG_DBH, ind.data$ORG_DBH[1] / 10)
max(ind.data$BAND_NUM) > 1
nb.index <- which(!duplicated(ind.data$BAND_NUM))[-1]
nb.index
ind.data$BAND_NUM
ind.data
setwd("~/Dropbox/RESEARCH/DENDRO/Intensive_dendrometer_project")#
library(RColorBrewer)#
library(doParallel)#
#
## ----eval=TRUE, echo=TRUE, tidy=TRUE, results="hide"---------------------#
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
INPUT.data <- read.csv("PROCESSED_DATA/tree_7444.csv")
get.optimized.dendro(INPUT.data,#
  no.neg.growth = TRUE, cutoff = 9, units = "cm",#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table.csv"),#
  Dendro.data.name = sprintf("Dendro_data.Rdata"),#
  Dendro.split.name = sprintf("Dendro_data_split.Rdata"))
get.optimized.dendro
INPUT.data <- read.csv("PROCESSED_DATA/five_merged_datasets.csv")#
INPUT.data <- read.csv("PROCESSED_DATA/tree_7444.csv")
get.optimized.dendro(INPUT.data,#
  no.neg.growth = TRUE, cutoff = 9, units = "cm",#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table.csv"),#
  Dendro.data.name = sprintf("Dendro_data.Rdata"),#
  Dendro.split.name = sprintf("Dendro_data_split.Rdata"))
band.index <- as.numeric(table(INPUT.data$BAND_NUM))#
INPUT.data$BAND_NUM <- unlist(mapply(rep, seq(length(band.index)), length.out = band.index))
get.optimized.dendro(INPUT.data,#
  no.neg.growth = TRUE, cutoff = 9, units = "cm",#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table.csv"),#
  Dendro.data.name = sprintf("Dendro_data.Rdata"),#
  Dendro.split.name = sprintf("Dendro_data_split.Rdata"))
INPUT.data <- subset(INPUT.data, complete.cases(INPUT.data$GAP_WIDTH))
get.optimized.dendro(INPUT.data,#
  no.neg.growth = TRUE, cutoff = 9, units = "cm",#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table.csv"),#
  Dendro.data.name = sprintf("Dendro_data.Rdata"),#
  Dendro.split.name = sprintf("Dendro_data_split.Rdata"))
getwd()
knitr::purl("RDendrom_vignette.Rmd")
