CStack_info()
run.mix.gamma(grow.vec, gam.pars)
curve(fn, grow.vec, n=1000, main="Spline Interpolation Function")
curve(fn, grow.vec, n=10, main="Spline Interpolation Function")
mix.gamma(grow.vec, gam.param)
mix.gamma(grow.vec, gam.params)
mix.gamma(grow.vec, gam.pars)
plot(mix.gamma(grow.vec, gam.pars))
area_under_curve <- integrate(mix.gamma, min_x = min(grow.vec), max(grow.vec))$value
area_under_curve <- integrate(mix.gamma, min_x = min(grow.vec), max_x = max(grow.vec))$value
area_under_curve <- integrate(mix.gamma, gam.pars, min_x = min(grow.vec), max_x = max(grow.vec))$value
gam.pars
mix.gamma <- function(x, gam.pars) {#
  slow.prob <- dgamma(x, gam.pars[1], gam.pars[3])#
  fast.prob <- dgamma(x, gam.pars[2], gam.pars[4])#
  return(tot.prob <- slow.prob + fast.prob)#
}
?integrate
area_under_curve <- integrate(mix.gamma, #
  min_x = min(grow.vec), #
  max_x = max(grow.vec), #
  gam.pars)$value
area_under_curve <- integrate(mix.gamma, #
  lower = min(grow.vec), #
  upper = max(grow.vec), #
  gam.pars)$value
area_under_curve
apply_fn <- function(xval){integrate(fn, min_x, min(xval, max_x), gam.pars)$value}
sapply(x[min_x <= x & x <= max_x], FUN = apply_fn)
min_x <- min(grow.vec)
max_x <- max(grow.vec)
apply_fn <- function(xval){integrate(fn, min_x, min(xval, max_x), gam.pars)$value}
apply_fn
sapply(grow.vec[min_x <= x & x <= max_x], FUN = apply_fn)
y[min_x <= x & x <= max_x] <- sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) / total_area_under_curve#
    y[min_x <= x & x <= max_x] <- sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) / total_area_under_curve
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn)
fn
integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value
xval <- grow.vec
apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}
apply_fn
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn)
y <- rep(NA, length(grow.vec))
y[min_x <= x & x <= max_x] <-
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) /
area_under_curve
y[min_x <= grow.vec & grow.vec <= max_x] <-
sapply(grow.vec[min_x <= grow.vec & grow.vec <= max_x], FUN = apply_fn) /
area_under_curve
y
y[x < min_x] <- 0#
    y[x > max_x] <- 1
plot(y)
run.mix.gamma <- function(x, gam.pars){#
   # Returns a spline function (made up of cubic polynomials) that interpolates the#
   # points given by the x and y vectors. The function has range [min(x), max(x)].#
   fn <- mix.gamma(x, gam.pars)#
   min_x <- min(x)#
   max_x <- max(x)#
   f <- function(x){#
      y <- fn(x)#
      y[x < min_x | max_x < x] <- NA#
      return(y)#
   }#
   return(f)#
}
mix.gamma <- function(x, gam.pars) {#
  slow.prob <- dgamma(x, gam.pars[1], gam.pars[3])#
  fast.prob <- dgamma(x, gam.pars[2], gam.pars[4])#
  return(tot.prob <- slow.prob + fast.prob)#
}
run.mix.gamma(grow.vec, gam.pars)
fn <- run.mix.gamma(grow.vec, gam.pars)
fn
fn(grow.vec)
fn(grow.vec, grow.vec)
cdf <- function(x, fn = mix.gamma) {#
  min_x <- min(x)#
  max_x <- max(x)#
  area_under_curve <- integrate(mix.gamma,#
    lower = min(x),#
    upper = max(x),#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
}
cdf
inverse(cdf)
cdf.inv <- inverse(cdf)
cdf.inv(grow.vec)
cdf.inv <- inverse(cdf, gam.pars)
cdf.inv
cdf.inv <- inverse(cdf)
cdf.inv(grow.vec)
cdf.inv(grow.vec, min_x = min(grow.vec), max_x = max(gorw.vec))
cdf <- function(x, fn = mix.gamma) {#
  min_x <- min(x)#
  max_x <- max(x)#
  area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
}
cdf.inv <- inverse(cdf)
cdf.inv(grow.vec, min_x = min(grow.vec), max_x = max(gorw.vec))
cdf.inv(grow.vec)
traceback()
cdf <- function(x, min_x, max_x) {#
  f <- function(x) {#
    area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
    }#
    return(f)#
}
plot(cdf(grow.vec, min(grow.vec), max(grow.vec)))
cdf(grow.vec)
plot(cdf(grow.vec))
fn <- cdf(grow.vec, min(grow.vec), max(grow.vec))
fn
fn(grow.vec)
inv(fn)
inverse(nf)
inverse(fn)
cdf.nf <- cdf(grow.vec, min(grow.vec), max(grow.vec))
cdf.inv <- inverse(cdf.fn)
cdf.inv(.4)
cdf.inv(.4, min_x = min(grow.vec))
cdf.nf
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))
cdf.inv(.4)
cdf.fn <- cdf(grow.vec, min(grow.vec), max(grow.vec))
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))
cdf.inv(.4)
cdf.inv(.4, gam.pars)
cdf.fn
cdf.inv
cdf.fn
cdf.inv
cdf.inv(.4, gam.pars)
cdf <- function(x, min_x, max_x) {#
  f <- function(x, gam.pars) {#
    area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
    }#
    return(f)#
}
cdf.fn <- cdf(grow.vec, min(grow.vec), max(grow.vec))#
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))#
cdf.inv(.4, gam.pars)
cdf.inv(.4, gam.pars = gam.pars)
cdf.inv <- inverse(cdf.fn, gam.pars, min_x = min(grow.vec), max_x = max(grow.vec))
cdf.inv(.4, gam.pars = gam.pars)
cdf <- function(x, min_x, max_x, gam.pars) {#
  f <- function(x, gam.pars) {#
    area_under_curve <- integrate(mix.gamma,#
    lower = min_x,#
    upper = max_x,#
    gam.pars)$value#
    apply_fn <- function(xval){integrate(mix.gamma, min_x, min(xval, max_x), gam.pars)$value}#
    y <- rep(NA, length(x))#
    y[min_x <= x & x <= max_x] <-#
    sapply(x[min_x <= x & x <= max_x], FUN = apply_fn) /#
    area_under_curve#
    y[x < min_x] <- 0#
    y[x > max_x] <- 1#
      return(y)#
    }#
    return(f)#
}#
cdf.fn <- cdf(grow.vec, min(grow.vec), max(grow.vec), gam.pars)#
cdf.inv <- inverse(cdf.fn, gam.pars, min_x = min(grow.vec), max_x = max(grow.vec))#
cdf.inv(.4, gam.pars = gam.pars)
?inverse
??inverse
GoFKernel
install.packages(GoFKernel)
install.packages('GoFKernel')
library(GoFKernel)
inverse
rm(inverse)
inverse
cdf.inv <- inverse(cdf.fn, min_x = min(grow.vec), max_x = max(grow.vec))
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec))
cdf.inv <- inverse(cdf.fn, min(grow.vec), max(grow.vec), gam.pars)
cdf.inv <- inverse(cdf.fn, lower = min(grow.vec), upper = max(grow.vec), gam.pars)
cdf.fn
mix.gamma
run.mix.gamma <- function(x, gam.pars){#
   # Returns a spline function (made up of cubic polynomials) that interpolates the#
   # points given by the x and y vectors. The function has range [min(x), max(x)].#
   fn <- mix.gamma(x, gam.pars)#
   min_x <- min(x)#
   max_x <- max(x)#
   f <- function(x){#
      y <- fn(x)#
      y[x < min_x | max_x < x] <- NA#
      return(y)#
   }#
   return(f)#
}
gam.fn <- run.mix.gamma(grow.vec, gam.pars)
gam.fn
gam.fn(grow.vec)
plot(gam.fn(grow.vec))
9 / 19
9 / 10
10 - 9
load('~/Dropbox/size.structure.dataset.outputs.RData')
objects()
lapply(objects(), summary)
lapply(objects(), str)
plot.chm
objects()
str(plot.meta)
summary(plot.meta)
str(plot.meta)
library(tidyverse)
?mdy
as.Date
?as.Date
library(forecast)#
library(fpp2)
?ts
?seasonplot
autoplot()
?outoplot
?autoplot
?substr
?split
2^6
?optim
100895.46 *0.28
28250.73 -7018.25
99602.66-3000
96602.66 * 0.0475
96602.66 * 0.0475+90
96602.66-4678.626
99602.66 * 0.025
99602.66 * 0.025 + 4678.63
99602.66 * 0.025 + 4678.63 - 6844.12
251 / 8
library(mvtnorm)
dmvnorm(x=c(0,0))#
dmvnorm(x=c(0,0), mean=c(1,1))#
x <- rmvnorm(n=100, mean=c(1,1))#
plot(x)
x
35 *12
rm(list = ls())#
#
### LIBRARIES ####
if (!require("pacman")) install.packages("pacman"); library(pacman)#
pacman::p_load(parallel, doParallel, foreach, Rcpp)#
#
### SOURCE THE data ####
# load interval and working.iter#
load("results/BCI/GLUEsetup_BCI.RData") # has model info and data on obs #
load(file.path("results/BCI/4.1GLUEsetup_part2_BCI.RData")) # has working.iter and growth and si matrix#
#
intervals <- info$intervals#
working.iter <- 1e+05 #growth_by_si.info$working.iter#
growth.data <- growth_by_si.info$growth.data#
load(file = paste("results/BCI/ds.bestfit_", working.iter, "_", growth.data, ".Rdata", sep = ""))# imports ds.bestfit
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
data(INPUT_dendro)
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$DATA_SET[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$DATA_SET[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$DATA_SET[1]))
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
data(INPUT_dendro)
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$DATA_SET[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$DATA_SET[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$DATA_SET[1]))
traceback()
devtools::install_github("seanmcm/RDendrom")
get.params
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
get.params
data(INPUT_dendro)
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$DATA_SET[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$DATA_SET[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$DATA_SET[1]))
getwd()
INPUT.dendro$DATA_SET[1]
INPUT.dendro$DATA_SET
INPUT.dendro
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$PROJECT[1]),#
  Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$PROJECT[1]))
param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$PROJECT[1])#
Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$PROJECT[1])#
Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$PROJECT[1])#
OUTPUT.folder <- c(".")#
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))#
load(file = paste(OUTPUT.folder, Dendro.data.name, sep = "/")) # loads Dendro.complete#
load(file = paste(OUTPUT.folder, Dendro.split.name, sep = "/")) #loads Dendro.split#
load(file = paste(OUTPUT.folder, "Dendro_Tree.Rdata", sep = "/")) #loads Dendro.tree#
#
get.extra.metrics(#
  param.table,#
  Dendro.split,#
  OUTPUT.folder      = "OUTPUT",#
  param.table.name = sprintf("Param_table_complete_%s.csv", INPUT.dendro$PROJECT[1]),#
  Dendro.data.name = sprintf("Dendro_data_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Quantile.hull.name = "Quantile.hull.Rdata")
param.table.name = sprintf("Param_table_%s.csv", INPUT.dendro$PROJECT[1])#
Dendro.data.name = sprintf("Dendro_data_%s.Rdata", INPUT.dendro$PROJECT[1])#
Dendro.split.name = sprintf("Dendro_data_split_%s.Rdata", INPUT.dendro$PROJECT[1])#
OUTPUT.folder <- c(".")#
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))#
load(file = paste(OUTPUT.folder, Dendro.data.name, sep = "/")) # loads Dendro.complete#
load(file = paste(OUTPUT.folder, Dendro.split.name, sep = "/")) #loads Dendro.split#
load(file = paste(OUTPUT.folder, "Dendro_Tree.Rdata", sep = "/")) #loads Dendro.tree#
#
get.extra.metrics(#
  param.table,#
  Dendro.split,#
  OUTPUT.folder      = ".",#
  param.table.name = sprintf("Param_table_complete_%s.csv", INPUT.dendro$PROJECT[1]),#
  Dendro.data.name = sprintf("Dendro_data_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Dendro.split.name = sprintf("Dendro_data_split_complete_%s.Rdata", INPUT.dendro$PROJECT[1]),#
  Quantile.hull.name = "Quantile.hull.Rdata")
param.table.name = sprintf("Param_table_complete_%s.csv", INPUT.dendro$PROJECT[1])#
OUTPUT.folder <- c(".")#
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))#
head(param.table)
devtools::install_github("seanmcm/RDendrom")
library(RDendrom)
data(INPUT_dendro)
head(INPUT.dendro)
get.optimized.dendro(INPUT.dendro,#
  no.neg.growth = TRUE, cutoff = 9,#
  par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd"),#
  OUTPUT.folder = ".",#
  param.table.name = sprintf("Param_table.csv"),#
  Dendro.data.name = sprintf("Dendro_data.Rdata"),#
  Dendro.split.name = sprintf("Dendro_data_split.Rdata"))
param.table.name = sprintf("Param_table.csv")
Dendro.data.name = sprintf("Dendro_data.Rdata")
Dendro.split.name = sprintf("Dendro_data_split.Rdata")
OUTPUT.folder <- c(".")
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))
load(file = paste(OUTPUT.folder, Dendro.data.name, sep = "/")) # loads Dendro.complete
load(file = paste(OUTPUT.folder, Dendro.split.name, sep = "/")) #loads Dendro.split
load(file = paste(OUTPUT.folder, "Dendro_Tree.Rdata", sep = "/")) #loads Dendro.tree
get.extra.metrics(#
  param.table,#
  Dendro.split,#
  OUTPUT.folder      = ".",#
  param.table.name = sprintf("Param_table_complete.csv"),#
  Dendro.data.name = sprintf("Dendro_data_complete.Rdata"),#
  Dendro.split.name = sprintf("Dendro_data_split_complete.Rdata"),#
  Quantile.hull.name = "Quantile.hull.Rdata")
param.table.name = sprintf("Param_table_complete.csv")#
OUTPUT.folder <- c(".")#
param.table <- read.csv(file = paste(OUTPUT.folder, param.table.name, sep = "/"))#
head(param.table)
plot.dendro.ts(ts.data = Dendro.split[[3]], params = param.table[3, ],#
  day = seq(365))
plot.dendro.tree(Dendro.tree[[1]], param.tab = param.table)
plot.dendro.tree
dendro.ts
roxygen2::roxygenise()
roxygen2::roxygenise()
library(RDendrom)
make.dendro.plot.ts
make.dendro.plot.ts(ts.data = Dendro.split[[3]], params = param.table[3, ],#
  day = seq(365))
# This takes multiple years (and bands) from the same tree
make.dendro.plot.tree(Dendro.tree[[1]], param.tab = param.table)
param.tab = param.table
Dendro.tree <-Dendro.tree[[1]]
get.years      <- unique(Dendro.tree$YEAR) #Just the years#
  start.date     <- paste(get.years[1], "-01-01", sep = "")#
  end.date       <- paste(get.years[length(get.years)], "-12-31", sep = "")#
  date.seq       <- format(seq(as.Date(start.date), as.Date(end.date),#
                    by = "1 day")) # vector of dates y-m-d#
  doy.seq        <- seq_along(date.seq) # sequence length of dates (for x axis)#
  year.index     <- droplevels(cut(as.Date(date.seq), breaks = "year",#
        right = FALSE, drop = TRUE))#
  ln.year.ind    <- length(levels(year.index))#
  year.split.seq <- split(doy.seq, year.index) # splits dates into years#
  year.dates     <- split(date.seq, year.index) # splits dates into years#
  year.doy.seq   <- lapply(year.dates, function(x) seq(length(x)))#
#
  doy.shift <- cumsum(sapply(year.doy.seq, length)) - length(year.doy.seq[[1]])#
#
  if (length(get.years) != ln.year.ind) return(NULL)#
  # SETTING UP PLOTTING
doy.ls <- split(Dendro.tree$DOY, Dendro.tree$YEAR)#
  doy.new.tmp <- vector("list", length(doy.ls))#
  for(i in 1:length(doy.ls)) {#
    doy.new.tmp[[i]] <- doy.ls[[i]] + .sum.doy(doy.ls[[i]], doy.shift[i])#
  }#
  doy.4.plotting <- as.integer(unlist(doy.new.tmp))
axis.date.at <- as.integer(which(unlist(year.doy.seq) == 180))#
  year.at <- as.integer(which(unlist(year.doy.seq) == 1))#
  axis.dates <- date.seq[axis.date.at]#
#
  # Need to put any par() adjustments or meta-plot info#
  cols <- ifelse(Dendro.tree$ADJUST != 0, "gold", "black")#
  # Plot the data and establish the axes#
  plot(doy.4.plotting, Dendro.tree$DBH_TRUE, col = cols, pch = 18, cex = 0.5,#
    main = sprintf(" %s | %s | %s", Dendro.tree$SITE[1], Dendro.tree$TREE_ID[1],#
      Dendro.tree$SP[1]),#
    ylab = "DBH (cm)", xlab = "Date", axes = FALSE)#
  axis(2)#
  axis(1, labels = get.years, at = axis.date.at, tick = FALSE)#
  box()#
  abline(v = year.at, col = "gray", lty = 3)
axis.date.at <- as.integer(which(unlist(year.doy.seq) == 180))#
  year.at <- as.integer(which(unlist(year.doy.seq) == 1))#
  axis.dates <- date.seq[axis.date.at]#
#
  # Need to put any par() adjustments or meta-plot info#
  cols <- ifelse(Dendro.tree$ADJUST != 0, "gold", "black")#
  # Plot the data and establish the axes#
  plot(doy.4.plotting, Dendro.tree$DBH_TRUE, col = cols, pch = 18, cex = 0.5,#
    main = sprintf(" %s | %s | %s", Dendro.tree$SITE[1], Dendro.tree$TREE_ID[1],#
      Dendro.tree$SP[1]),#
    ylab = "DBH (cm)", xlab = "Date", axes = FALSE)#
  axis(2)#
  axis(1, labels = get.years, at = axis.date.at, tick = FALSE)#
  box()#
  abline(v = year.at, col = "gray", lty = 3)
axis.date.at <- as.integer(which(unlist(year.doy.seq) == 180))#
  year.at <- as.integer(which(unlist(year.doy.seq) == 1))#
  axis.dates <- date.seq[axis.date.at]#
#
  # Need to put any par() adjustments or meta-plot info#
  cols <- ifelse(Dendro.tree$ADJUST != 0, "gold", "black")#
  # Plot the data and establish the axes#
  plot(doy.4.plotting, Dendro.tree$DBH_TRUE, col = cols, pch = 18, cex = 0.5,#
    main = sprintf(" %s | %s | %s", Dendro.tree$SITE[1], Dendro.tree$TREE_ID[1],#
      Dendro.tree$SP[1]),#
    ylab = "DBH (cm)", xlab = "Date", axes = FALSE)#
  axis(2)#
  axis(1, labels = get.years, at = axis.date.at, tick = FALSE)#
  box()#
  abline(v = year.at, col = "gray", lty = 3)
Dendro.tree[[1]]
Dendro.tree[
]
Dendro.complete
head(INPUT.data)
head(INPUT.dendro)
head(INPUT.dendro, 100)
tail(INPUT.dendro, 100)
INPUT.dendro <- read.csv("~/Dropbox/GIT_REPOSITORIES/RDendrom/data/Data_sample.csv")
save(INPUT.dendro, file = "INPUT_dendro.RData")
head(INPUT.dendro)
summary(INPUT.dendro)
no.neg.growth = TRUE
cutoff = 9
units = "cm"
par.names = c("L", "K", "doyip", "r", "theta", "a", "b", "r.squared", "ts.sd")
OUTPUT.folder = "."
param.table.name = "Param_table.csv"
Dendro.data.name = "Dendro_data.Rdata"
Dendro.split.name = "Dendro_data_split.Rdata"
options(warn = -1)#
  TREE.ID <- paste(INPUT.dendro$SITE, INPUT.dendro$TREE_ID,#
    INPUT.dendro$BAND_NUM, sep = "_")#
  TREE.ID.YR <- paste(as.character(INPUT.dendro$SITE), as.character(INPUT.dendro$TREE_ID),#
    as.character(INPUT.dendro$YEAR), sep = "_")#
  Dendro.split <- vector("list", length = length(unique(TREE.ID.YR)))#
  ind.dendro <- split(INPUT.dendro, f = TREE.ID)
n.obs <- length(ind.dendro)
i <- 1
n.obs <- length(ind.dendro)#
#
  param.table <-c()#
  pb <- txtProgressBar(style = 3)#
  Dendro.tree <- vector("list", length(ind.dendro))#
  ct <- 1
ind.data <- ind.dendro[[i]] # loads an individual (multiple years)#
    OD <- which(!is.na(ind.data$ORG_DBH))
OD
INPUT.dendro
xx <- subset(INPUT.dendro, TREE_ID == 30261)
xx
!is.duplicated(xx$BAND_NUM)
!duplicated(xx$BAND_NUM)
which(!duplicated(xx$BAND_NUM))
